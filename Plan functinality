**Refined TDL: Plan Feature Implementation (Revision 5 - Enhanced Dynamic Integration)**

*(Focusing on Dynamic City Creation, RPC Communication, Async Enrichment, Scalable Eventing + Simplified Linking + Encapsulated City Logic + Enhanced Robustness)*

**Phase 1: Core Infrastructure & Entities (Est. 6-7 days - slightly increased for RPC/entity changes)**

1.  **Setup `@nestjs/microservices` (Redis Transporter for Events & RPC):**
    *   **Goal:** Enable reliable event communication (Pub/Sub) and direct request-response (RPC) between services using Redis.
    *   **Action:** Install dependencies: `npm install --save @nestjs/microservices ioredis` (verify not already present).
    *   **Action:** Configure Redis connection details via `ConfigService` (reuse existing config).
    *   **Action (Event Emitter - `plan` service):** In `PlanModule`, register `ClientsModule` for **`'PLAN_EVENTS_SERVICE'`** (as before) for emitting events like `plan.created`, `city.created`.
    *   **Action (RPC Client - `venue` service):** In `VenueModule`, register `ClientsModule` for **`'PLAN_SERVICE_RPC'`** (new client name) to enable calling the plan service directly (e.g., for `city.findOrCreate`). Use `registerAsync` similar to the event client.
        ```typescript
        // Example in venue.module.ts
        ClientsModule.registerAsync([
              {
            name: 'PLAN_SERVICE_RPC', // Unique identifier for RPC client
            imports: [ConfigModule],
                useFactory: (configService: ConfigService) => ({
                  transport: Transport.REDIS,
              options: { /* Redis options from ConfigService */ },
                }),
                inject: [ConfigService],
              },
          // Potentially other clients if Venue needs to call other services
        ]),
        ```
    *   **Action (Event/Message Listeners):** In `main.ts`, connect the application to listen for both microservice events (`@EventPattern`) and messages (`@MessagePattern`) via the Redis transporter (as shown in Rev 4). Ensure services/controllers containing `@EventPattern` or `@MessagePattern` decorators are correctly imported and configured.
    *   **Junior Dev Note:** This setup supports both fire-and-forget events (`PLAN_EVENTS_SERVICE.emit`) and request-response calls (`PLAN_SERVICE_RPC.send`). Ensure client names are consistent. Verify Redis config variables (`REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD`) in `.env.*`.

2.  **Create/Update Entities:**
    *   **`City` Entity** (`plan` service - `entities/city.entity.ts` - **Modification**):
        *   Fields: `id` (uuid, primary), `name` (string, 100, indexed), `countryCode` (string, 2, indexed), `location` (geometry, Point, 4326, nullable, spatial index), `flagEmoji` (string, 10, nullable), `trendingScore` (float, default 0, indexed), `planCount` (integer, default 0), **`imageUrl` (string, 2048, nullable)**, `createdAt` (timestamp with tz), `updatedAt` (timestamp with tz).
        *   **Action:** Add the `imageUrl` column. Ensure migration updates the table.
        *   Needs `@Entity('cities')` decorator. Use TypeORM decorators. PostGIS setup confirmed available.
    *   **`Plan` Entity** (`plan` service - `entities/plan.entity.ts`): No changes from Rev 4.
    *   **`PlanUser` Entity** (`plan` service - `entities/plan-user.entity.ts`): No changes from Rev 4.
    *   **`Venue` Entity** (`venue` service - `entities/venue.entity.ts` - **Modification**): No changes from Rev 4 (still needs `cityId`).
    *   **`Event` Entity** (`event` service - **Modification**): No changes from Rev 4 (still needs `cityId`).

3.  **Database Migrations:**
    *   **Action:** Use TypeORM CLI (`npm run typeorm:generate-migration -- -n MigrationName -d dist/src/data-source.js`) to generate migrations.
    *   **Migration 1 (`plan` service scope):** Create `cities` (including `image_url` column), `plans`, `plan_users` tables. Add indexes, relations, constraints as per Rev 4.
    *   **Migration 2 (`venue` service scope):** Add `city_id` column to `venues` (as per Rev 4).
    *   **Migration 3 (`event` service scope):** Add `city_id` column to `events` (as per Rev 4).
    *   **Junior Dev Note:** Review SQL carefully. Test migrations locally. Backfill logic is separate (Phase 3).

4.  **Dynamic City Creation & Optional Seeding (`plan` service):**
    *   **Primary Mechanism:** Cities will be primarily created dynamically when users create Plans or when Venues are scanned/updated (see Phase 2). The core logic resides in `CityRepository.findOrCreateByNameAndCountry`.
    *   **Optional Seeding:**
        *   **Action:** Implement `CitySeederService` (e.g., `plan/seeders/city.seeder.service.ts`) as an *optional* admin tool.
        *   **Action:** Inject `CityRepository`. Method should read from CSV/JSON (file path via config or argument).
        *   **Action:** Loop through file data, calling `cityRepository.findOrCreateByNameAndCountry` for each entry. This ensures seeding respects the primary dynamic creation logic and avoids duplicates.
        *   **Action:** Trigger via custom CLI command or admin endpoint.
    *   **Junior Dev Note:** The main flow doesn't rely on seeding anymore. The seeder is just for bulk pre-population if needed by an admin.

**Phase 2: Repositories & Core Services (Est. 8-10 days - increased for dynamic logic, RPC, new services)**

5.  **Create/Update Repositories (`plan`, `venue`, `event` services):**
    *   **`plan.CityRepository`:**
        *   Implement standard CRUD. Add/Refine:
        *   `findByNameAndCountry(name: string, countryCode: string): Promise<City | null>`:
            *   **Sub-step:** Implement input normalization (e.g., lowercase, trim).
            *   **Sub-step:** Perform DB lookup using normalized values.
        *   `findOrCreateByNameAndCountry(name: string, countryCode: string, location?: { type: 'Point', coordinates: number[] }): Promise<City>`:
            *   **Sub-step:** Normalize input `name` and `countryCode`.
            *   **Sub-step:** Call `this.findByNameAndCountry`.
            *   **Sub-step:** If found, return existing city.
            *   **Sub-step:** If not found, prepare data for new `City` entity (map fields, convert `location` to PostGIS Point format using `ST_SetSRID(ST_MakePoint(lng, lat), 4326)`, set defaults).
            *   **Sub-step:** Call `this.repository.create(newData)`.
            *   **Sub-step:** Call `this.repository.save(newCityEntity)` within a `try/catch` block to handle potential DB errors (e.g., unique constraint violation).
            *   **Sub-step (Event Emission):** *After successful save*, inject `eventClient` (`@Inject('PLAN_EVENTS_SERVICE')`) and emit `city.created` event:
                *   Construct payload: `{ cityId: savedCity.id, name: savedCity.name, /* include lat/lon if useful for listener */ eventId: uuidv4() }`.
                *   Call `this.eventClient.emit('city.created', payload)` within a *separate* `try/catch` to log potential emission failures without failing the main operation.
            *   **Sub-step:** Return the `savedCity`.
            *   **Migration Note:** Ensure migration adds unique constraint `(normalized_name, countryCode)` if feasible (requires storing normalized values or using DB functions).
        *   `findCityByLocation(location: Point): Promise<City | null>` (as per Rev 4 - Use `ST_DWithin` or `ST_Distance`).
        *   `incrementPlanCount(cityId: string, amount: number): Promise<void>` (as per Rev 4).
        *   `updateTrendingScore(cityId: string, score: number): Promise<void>` (as per Rev 4).
        *   `findTrendingCities(limit: number): Promise<City[]>` (as per Rev 4 - ensure `ORDER BY trendingScore DESC`).
        *   **(NEW)** `updateImageUrl(cityId: string, imageUrl: string): Promise<void>`:
            *   **Sub-step:** Implement standard TypeORM `update` or `save` logic for the `imageUrl` field.
    *   **`plan.PlanRepository`:** No changes from Rev 4.
    *   **`plan.PlanUserRepository`:** No changes from Rev 4.
    *   **`venue.VenueRepository` / `event.EventRepository`:** Update `create`/`save`/`update` methods as needed to accept and persist the optional `cityId` field.

6.  **Core Services Implementation & Communication:**
    *   **`plan.PlanService` (Handles Plan Logic & Events):**
        *   Inject `PlanRepository`, `PlanUserRepository`, `CityRepository` (or `CityService` client if strict boundaries), `GoogleMapsService`, `@Inject('PLAN_EVENTS_SERVICE') private readonly eventClient: ClientProxy`, `Logger`, `ConfigService`.
        *   **`createPlan(userId: string, dto: CreatePlanDto): Promise<Plan>`:**
            *   **Sub-step 1 (Define DTO):** Ensure `CreatePlanDto` interface/class includes `destination: string`, `startDate`, etc.
            *   **Sub-step 2 (Resolve City):** Call internal helper `async _resolveCity(destination: string): Promise<City>`.
                *   Inside `_resolveCity`:
                    *   Attempt local lookup: `cityRepository.findByNameAndCountry()` (detail simple parsing logic for `destination`, e.g., "City, Country").
                    *   If not found locally: Call `googleMapsService.geocodeAddress(destination)`. Handle potential `null` response.
                    *   If geocode succeeds: Parse `address_components` -> `cityName`, `countryCode` (prioritize `locality`, fallback `administrative_area_level_1`; find `country`). Handle parsing errors/missing components gracefully.
                    *   Call `cityRepository.findOrCreateByNameAndCountry(cityName, countryCode, { location: geocodedLocation })`. Handle potential errors from this call.
                    *   If a valid `City` object is returned (from local lookup or creation), return it.
                    *   If all resolution attempts fail: **Throw `BadRequestException('Could not resolve destination city. Please check the name and try again.')`**.
            *   **Sub-step 3 (Handle Resolution Result):** Await `_resolveCity`. If it throws, the exception propagates. If successful, extract `cityId`.
            *   **Sub-step 4 (Save Plan):** Prepare `Plan` entity data (`creatorId`, `cityId`, DTO fields). Call `planRepository.save(planData)`. Handle potential save errors.
            *   **Sub-step 5 (Emit Event):** *After successful plan save*, construct payload `{ planId: newPlan.id, cityId: cityId, creatorId: userId, eventId: uuidv4() }`. Call `this.eventClient.emit('plan.created', payload)` within a `try/catch` to log emission errors.
            *   **Sub-step 6 (Return):** Return the created `Plan` object.
        *   Other methods (`deletePlan`, `savePlan`, etc.) as per Rev 4, emitting events via `eventClient`. Ensure detailed payloads and `eventId`.
    *   **`plan.CityService` (Handles City Logic & RPC):**
        *   Inject `CityRepository`, `@Inject('PLAN_EVENTS_SERVICE') private readonly eventClient: ClientProxy`. (Note: `eventClient` needed here if Repo doesn't emit event).
        *   **`@MessagePattern('city.findOrCreate')` Decorator:**
            *   `async handleFindOrCreateCity(@Payload() data: { name: string; countryCode: string; location?: { latitude: number; longitude: number } }): Promise<City | null>`:
                *   **Sub-step 1 (Input Handling):** Validate incoming payload `data`.
                *   **Sub-step 2 (Prepare Location):** Convert `data.location` (lat/lon) to TypeORM Point geometry format if present.
                *   **Sub-step 3 (Call Repository):** Call `this.cityRepository.findOrCreateByNameAndCountry(data.name, data.countryCode, pointData)`.
                *   **Sub-step 4 (Handle Repository Result):** Return the `City` object if successful. If the repository throws an error or returns null, handle it appropriately (log error, return `null` or re-throw a specific RPC exception like `RpcException`).
                *   **Sub-step 5 (Event Emission Note):** Ensure `city.created` event is emitted reliably *once* upon actual creation (likely best handled within the repository `save` logic as detailed in Task 5).
        *   Implement other methods as needed (e.g., `calculateAndSaveTrendingScore`).
        *   **(Listener Logic):** Implement `@EventPattern` handlers (e.g., in a separate `CityEventListenerService` or controller) for `plan.created`, `plan.deleted` to call `cityRepository.incrementPlanCount`. Implement Idempotency Handler (as per Rev 4, using Redis `set NX` on `eventId`).
    *   **`plan.CityImageService` (NEW - Handles Async Image Fetching):**
        *   Inject `CityRepository`, `GoogleMapsService`, `Logger`.
        *   **`@EventPattern('city.created')` Decorator:**
            *   `async handleCityCreated(@Payload() data: { cityId: string; name: string; /* lat/lon? */ eventId: string }): Promise<void>`:
                *   **Sub-step 1 (Idempotency):** Implement check using `eventId` and Redis (`set NX` with TTL). If lock exists, log duplicate and return.
                *   **Sub-step 2 (Get Place ID):** Call `googleMapsService.geocodeAddress(data.name)` or `googleMapsService.findPlaceFromText(data.name)` to get a `placeId`. Log and return if `placeId` not found.
                *   **Sub-step 3 (Get Details):** Call `googleMapsService.getPlaceDetails(placeId, ['photos'])`. Log and return if error or no photos found.
                *   **Sub-step 4 (Get Photo URL):** Select first photo reference. Call `googleMapsService.getPhotoUrl(photoReference)`. Log and return if error.
                *   **Sub-step 5 (Update DB):** Call `cityRepository.updateImageUrl(data.cityId, imageUrl)`. Log success or DB update error.
                *   **Sub-step 6 (Release Lock):** Ensure Redis lock is released in a `finally` block (only if processing was successful or a non-transient error occurred that shouldn't be retried).
    *   **`venue.VenueScanConsumer` (`@Geo Hashing` - **Modification**):**
        *   Inject `VenueRepository`, `ScannedAreaRepository`, `GoogleMapsService`, `ConfigService`, `Logger`, **`@Inject('PLAN_SERVICE_RPC') private readonly planClient: ClientProxy`**.
        *   **Modify Worker Logic (Inside loop processing each `place`):**
            1.  After getting `placeDetails`, parse `address_components` -> `cityName`, `countryCode` (simplified logic). Handle parsing failures.
            2.  Construct RPC payload: `{ name: cityName, countryCode: countryCode, location: { latitude: placeDetails.geometry.location.lat, longitude: placeDetails.geometry.location.lng } }`.
            3.  Execute RPC call: `cityResult = await firstValueFrom(this.planClient.send<City | null>('city.findOrCreate', rpcPayload)).catch(err => { logger.error('RPC call failed', err); return null; });`
            4.  Handle RPC response:
                *   If `cityResult` is valid (`!= null`), extract `cityId = cityResult.id`. Prepare venue data `venueData = { ..., cityId: cityId }`.
                *   If `cityResult` is `null`, prepare venue data *without* `cityId`: `venueData = { ... }`. Log warning: `Venue ${placeDetails.place_id} could not be linked to a city.`.
            5.  Save/Update Venue: Call `this.venueRepository.save(venueData)` (or appropriate update method). Handle potential DB errors for the venue itself.
    *   **`event.EventService`:** (Integration steps unchanged from Rev 5, just ensure RPC client is used correctly).
    *   **(NEW) `Auth/User Service Endpoint` (e.g., `user.UserController`):**
        *   **Action:** Create `POST /user/location` endpoint. Apply authentication guard.
        *   Inject dependencies: `GoogleMapsService`, `@Inject('PLAN_SERVICE_RPC') planClient`, `@Inject('VENUE_SERVICE_RPC') venueClient` (Rename RPC client from VENUE_SERVICE_CLIENT), `Logger`, `ConfigService`.
        *   **Logic:**
            1.  Define DTO/validate incoming `{ latitude, longitude }`. Get `userId`.
            2.  Call `googleMapsService.reverseGeocode(latitude, longitude)`. Handle errors.
            3.  Parse result -> `cityName`, `countryCode`. Handle parsing errors.
            4.  Execute `city.findOrCreate` RPC (fire-and-forget): `firstValueFrom(planClient.send('city.findOrCreate', { name: cityName, countryCode: countryCode, location: { latitude, longitude } })).catch(err => logger.error('Error ensuring city exists on login trigger', err.message))`
            5.  Execute `venue.triggerScanIfStale` RPC (fire-and-forget): `firstValueFrom(venueClient.send('venue.triggerScanIfStale', { latitude, longitude })).catch(err => logger.error('Error triggering venue scan on login trigger', err.message))`
            6.  Return `HttpStatus.NO_CONTENT` (204).
    *   **(NEW) `GoogleMapsService` Enhancement:** Implement `async reverseGeocode(latitude, longitude): Promise<GeocodeResult | null>` using the Google Maps `/geocode/json` endpoint with `latlng` parameter. Parse and return relevant components. Add caching.
    *   **(NEW) `venue.VenueService` Enhancement:**
        *   Inject `VenueScanProducerService`, `ScannedAreaRepository`, `ConfigService`.
        *   Implement `async enqueueScanIfStale(latitude: number, longitude: number): Promise<void>` logic (checks `ScannedAreaRepository` against threshold, calls `venueScanProducerService.enqueueScan` if stale).
        *   Add `@MessagePattern('venue.triggerScanIfStale')` handler: `async handleTriggerScan(@Payload() data: { latitude: number; longitude: number }): Promise<void> { await this.enqueueScanIfStale(data.latitude, data.longitude); }`.

**Phase 3: Integration & Background Jobs (Est. 6-7 days - unchanged)**

7.  **Inter-Service Communication (Event Payloads & RPC Patterns):**
    *   Define Typescript interfaces/classes for event payloads (`PlanCreatedPayload`, `PlanSavedPayload`, **`CityCreatedPayload`**). Include `eventId`.
    *   Document RPC message patterns (`city.findOrCreate`, `venue.triggerScanIfStale`) and their expected request/response shapes.
8.  **Scheduled Tasks (`plan` service):** `CityTrendingJob` using `@nestjs/schedule`.
    *   **Action:** Implement job logic. Inject `CityRepository`. Fetch cities, calculate `trendingScore` (initially based primarily on `planCount`), call `cityRepository.updateTrendingScore`. Handle errors.
9.  **API Endpoints & Aggregation (`plan` service):**
    *   `CityController -> GET /cities/:cityId/details`: As per Rev 4.
    *   **(NEW) `CityController -> GET /cities/trending?limit=5`:**
        *   Inject `CityService` or `CityRepository`.
        *   Call `cityRepository.findTrendingCities(limit)`.
        *   Return the list of `City` objects (including `name`, `countryCode`, `imageUrl`, etc.). Ensure DTO excludes sensitive/internal fields. Apply caching.
    *   Implement other controllers/endpoints as needed.
10. **Backfill Jobs (`plan` service - Orchestration):**
    *   **`VenueCityBackfillJob`:** Fetch Venues w/o `cityId`, use `venue.location` (PostGIS Point), call `googleMapsService.reverseGeocode`, parse city/country, call RPC `planClient.send('city.findOrCreate', { name, countryCode })`, if successful update venue `cityId` via `venueService` RPC or directly if monolithic. Handle rate limits/batching.
    *   **`EventCityBackfillJob`:** As per Rev 4 (relies on Venues having `cityId` first).

**Phase 4: Testing & Refinement (Est. 5-6 days - increased for new test areas)**

11. **Testing:** Focus on:
    *   Dynamic city creation logic (DB lookup, Geocoding fallback, parsing).
    *   Geocoding failure handling during plan creation.
    *   RPC communication: `city.findOrCreate`, `venue.triggerScanIfStale` (request, response, error handling).
    *   `CityImageService` event handling, idempotency, image fetching logic, error fallbacks.
    *   Login trigger endpoint (`/user/location`): Reverse geocoding, RPC calls, scan trigger logic.
    *   `enqueueScanIfStale` logic.
    *   `CityTrendingJob` calculation and updates.
    *   `/cities/trending` endpoint functionality and caching.
    *   Idempotency/Retry for standard event listeners (as per Rev 4).
    *   Backfill job robustness.
12. **Performance Testing:** As per Rev 4. Add testing for `/cities/trending` and login trigger impact.

**Phase 5: Documentation & Deployment (Est. 2-3 days - unchanged)**

13. **API Documentation:** Update Swagger for modified/new endpoints (`/cities/trending`, `/user/location`). Document `city.created` event contract and RPC patterns (`city.findOrCreate`, `venue.triggerScanIfStale`).
14. **Deployment:** As per Rev 4. Ensure Redis handles both Pub/Sub and RPC. Deploy `plan` service first (or ensure handlers are ready) before deploying services that call it via RPC.

**Total Estimated Time:** 27-35 days (reflecting increased complexity in Phase 2 & 4).

---

**Explicit Acknowledgements & Trade-offs:**

*   **Eventing/RPC Reliability:** Relies on Redis. Accepted for Phase 1 (as per Rev 4).
*   **City Entity Ownership:** Remains in `plan` service. RPC used for cross-service access.
*   **Async Image Fetching:** City images might not appear instantly. Frontend needs placeholder.
*   **Geocoding Dependency:** Core functionality relies on Google Maps Geocoding/Places APIs being available and accurate.

--- 