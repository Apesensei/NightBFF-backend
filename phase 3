Here is the **Finalized Task Detail List (TDL) for Phase 3 Execution**:

**Phase 3: Documentation & Refinement**

*   **Task 3.2: Execute Gender Enum Migration (Multi-Step - Option A)**
    *   **Goal:** Safely transition the `gender` enum in the database and codebase from (`MALE`, `FEMALE`, `PREFER_NOT_TO_SAY`) to (`MALE`, `FEMALE`, `OTHER`).
    *   **Prerequisites:** Ensure application code deployed *before* Step 3.2.3 can handle all four enum values (`MALE`, `FEMALE`, `PREFER_NOT_TO_SAY`, `OTHER`) gracefully, even if `OTHER` isn't actively used yet. (This should be covered by Phase 1 work, but double-check).

    *   **Task 3.2.1: [Migration Script 1] Add 'OTHER' value to DB Enum**
        *   **Action:** Create a new TypeORM migration file.
        *   **File:** New `.ts` file in `app/src/database/migrations/` (e.g., `17...-AddOtherToGenderEnum.ts`).
        *   **`up()` Method SQL:** `await queryRunner.query("ALTER TYPE public.enum_user_profiles_gender ADD VALUE 'OTHER'");` (Verify enum name `enum_user_profiles_gender` if different).
        *   **`down()` Method:** Add a comment: `// Cannot reliably revert adding an enum value non-destructively in PostgreSQL without complex procedures.` (Or implement a placeholder `throw new Error(...)`).
        *   **Migration Class:** Set `public transaction = false;`.
        *   **Execution:** Run `npm run typeorm -- migration:run -d dist/data-source.js` (or equivalent script from `package.json`) in target environments (staging, then prod). Requires DB permissions to `ALTER TYPE`. Monitor closely.

    *   **Task 3.2.2: [Code Deployment 1] Deploy Code Handling All Values (If not already done)**
        *   **Action:** Ensure the currently deployed application code (specifically `UserDiscoveryService` filtering and any profile update logic) correctly handles `MALE`, `FEMALE`, `PREFER_NOT_TO_SAY`, *and* `OTHER`. The service logic from Phase 1 should already filter out `PREFER_NOT_TO_SAY`.
        *   **Files:** Verify `app/src/microservices/user/services/user-discovery.service.ts`, `app/src/microservices/user/entities/user-profile.entity.ts` (ensure enum definition includes all 4 temporarily if needed, though ideally logic handles unknown values).
        *   **Deployment:** Standard code deployment process.

    *   **Task 3.2.3: [Migration Script 2] Update Existing User Data**
        *   **Action:** Create *another* new TypeORM migration file.
        *   **File:** New `.ts` file in `app/src/database/migrations/` (e.g., `17...-MapPreferNotToSayToOther.ts`).
        *   **`up()` Method SQL:** `await queryRunner.query("UPDATE user_profiles SET gender = 'OTHER' WHERE gender = 'PREFER_NOT_TO_SAY'");`
        *   **`down()` Method SQL:** `await queryRunner.query("UPDATE user_profiles SET gender = 'PREFER_NOT_TO_SAY' WHERE gender = 'OTHER'");` (Assumes rollback is only needed for users originally mapped).
        *   **Migration Class:** Can use default transaction behavior (or set `transaction = true`).
        *   **Execution:** Run migration script *after* 3.2.1 and 3.2.2 are successfully completed and verified. Monitor performance (low risk given user count).

    *   **Task 3.2.4: [Code Deployment 2] Final Code Cleanup**
        *   **Action:** Modify the `Gender` enum definition in the entity file to remove `PREFER_NOT_TO_SAY`. Update any related DTOs or validation logic to reflect the final enum state (`MALE`, `FEMALE`, `OTHER`).
        *   **File:** `app/src/microservices/user/entities/user-profile.entity.ts`, relevant DTOs (`update-profile.dto.ts` etc.).
        *   **Deployment:** Deploy this code change *after* Task 3.2.3 is successfully completed and verified. This makes `OTHER` the standard and removes `PREFER_NOT_TO_SAY` from the application's perspective.
        *   **(Decision):** Do *not* attempt to drop `PREFER_NOT_TO_SAY` from the database `enum` type itself.

*   **Task 3.1: API Documentation Generation/Update**
    *   **Action:** Review and update Swagger (`@Api...`) decorators in `UserDiscoveryController`, `UserProfileController`, relevant DTOs (e.g., `UserProfileDto`, `UpdateProfileDto`), and the main Swagger setup (`app/src/main.ts`) to accurately reflect the *final* state of the `Gender` enum (`MALE`, `FEMALE`, `OTHER`) and any related API functionality.
    *   **Files:** `app/src/microservices/user/controllers/user-discovery.controller.ts`, `app/src/microservices/user/controllers/user-profile.controller.ts`, relevant DTOs, `app/src/main.ts`.
    *   **Timing:** Merge documentation updates alongside or immediately after the final code deployment (Task 3.2.4).

*   **Task 3.3: Code Review**
    *   **Action:** Conduct thorough PR reviews for all code changes (Tasks 3.2.4, 3.1) and especially the migration scripts (Tasks 3.2.1, 3.2.3).
    *   **Focus:**
        *   **Migration Scripts:** Correctness of SQL, handling of transactions (`transaction = false` for `ALTER TYPE`), safety, performance considerations (minimal for this project), idempotency (less critical here but good practice), validity of `down` methods.
        *   **Code Changes:** Correct final enum definition, updated DTOs/validation, adherence to coding standards, updated tests.
        *   **Documentation:** Accuracy of Swagger annotations.
    *   **Timing:** Integral part of the PR process for each sub-task.

---

*   **Issues/Challenges:** The primary challenge remains the careful, sequential execution of the multi-step migration (Task 3.2), particularly the non-transactional `ALTER TYPE` step (3.2.1). Close monitoring during deployment is essential. 